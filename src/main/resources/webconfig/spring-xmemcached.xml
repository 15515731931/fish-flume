<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"
	default-autowire="byName">
	<context:annotation-config />
	<context:component-scan base-package="com.fish" />

	<bean name="memcachedClient"
		class="net.rubyeye.xmemcached.utils.XMemcachedClientFactoryBean">
		<property name="servers">
			<!-- 服务器列表，格式：（ip：端口 ip：端口），多个以空格分割     10.0.1.75:12000 10.0.1.76:12000 10.0.1.77:12000-->
<!-- 			<value>10.0.1.75:11211</value> -->
 			<value>10.0.1.75:12000 10.0.1.76:12000 10.0.1.77:12000</value>
		</property>
		<!-- 和servers对应的节点的权重,weights是用来调节Memcached的负载，设置的权重越高，该Memcached节点存储的数据将越多，所承受的负载越大。 -->
<!-- 		<property name="weights"> -->
<!-- 			<list> -->
<!-- 				<value>1</value> -->
<!-- 				<value>2</value> -->
<!-- 				<value>3</value> -->
<!-- 			</list> -->
<!-- 		</property> -->

		<!-- nio连接池大小,默认一个Memcached节点只有一个连接池，通常条件是没有问题的。但是在典型的高并发环境下,nio的单连接也会遇到性能瓶颈。可通过调整连接池数量,<br> 
			当建立了多个连接到同一个Memcached节点，由于连接之间是不同步的，因此你的应用需要自己保证数据更新的同步 -->
		<property name="connectionPoolSize">
			<value>1</value>
		</property>

		<!-- 与服务器节点个数一致,密码不允许有空格 -->
<!-- 		<property name="authInfoMap"> -->
<!-- 			<map> -->
<!-- 				<entry key-ref="serverA"> -->
<!-- 					<bean class="net.rubyeye.xmemcached.auth.AuthInfo" -->
<!-- 						factory-method="typical"> -->
<!-- 						<constructor-arg index="0"> -->
<!-- 							<value>memcached</value> -->
<!-- 						</constructor-arg> -->
<!-- 						<constructor-arg index="1"> -->
<!-- 							<value>123456</value> -->
<!-- 						</constructor-arg> -->
<!-- 					</bean> -->
<!-- 				</entry> -->
<!-- 				<entry key-ref="serverB"> -->
<!-- 					<bean class="net.rubyeye.xmemcached.auth.AuthInfo" -->
<!-- 						factory-method="typical"> -->
<!-- 						<constructor-arg index="0"> -->
<!-- 							<value>memcached</value> -->
<!-- 						</constructor-arg> -->
<!-- 						<constructor-arg index="1"> -->
<!-- 							<value>123456</value> -->
<!-- 						</constructor-arg> -->
<!-- 					</bean> -->
<!-- 				</entry> -->
<!-- 				<entry key-ref="serverC"> -->
<!-- 					<bean class="net.rubyeye.xmemcached.auth.AuthInfo" -->
<!-- 						factory-method="typical"> -->
<!-- 						<constructor-arg index="0"> -->
<!-- 							<value>memcached</value> -->
<!-- 						</constructor-arg> -->
<!-- 						<constructor-arg index="1"> -->
<!-- 							<value>123456</value> -->
<!-- 						</constructor-arg> -->
<!-- 					</bean> -->
<!-- 				</entry> -->
<!-- 			</map> -->
<!-- 		</property> -->

		<!-- 分布策略，KetamaMemcachedSessionLocator(一致性哈希,增加主机时降低未命中率问题的解决); 
		还有实现了：ArrayMemcachedSessionLocator；ElectionMemcachedSessionLocator；
		LibmemcachedMemcachedSessionLocator；PHPMemcacheSessionLocator -->
		<property name="sessionLocator">
			<bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator" />
		</property>
		<!-- 序列化转换器 -->
		<property name="transcoder">
			<bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder" />
		</property>
		<!-- IoBuffer分配器(内容写入memcached时的内存控制策略) -->
		<property name="bufferAllocator">
			<bean class="net.rubyeye.xmemcached.buffer.SimpleBufferAllocator" />
		</property>
		<!-- 协议工厂net.rubyeye.xmemcached.command.BinaryCommandFactory(二进制),TextCommandFactory(文本),KestrelCommandFactory(可靠获取),本应用配置二进制方式 -->
		<property name="commandFactory">
			<bean class="net.rubyeye.xmemcached.command.BinaryCommandFactory" />
		</property>
	</bean>

<!-- 	<bean name="serverA" class="java.net.InetSocketAddress"> -->
<!-- 		<constructor-arg> -->
<!-- 			<value>10.0.1.75</value> -->
<!-- 		</constructor-arg> -->
<!-- 		<constructor-arg> -->
<!-- 			<value>12000</value> -->
<!-- 		</constructor-arg> -->
<!-- 	</bean> -->

<!-- 	<bean name="serverB" class="java.net.InetSocketAddress"> -->
<!-- 		<constructor-arg> -->
<!-- 			<value>10.0.1.76</value> -->
<!-- 		</constructor-arg> -->
<!-- 		<constructor-arg> -->
<!-- 			<value>12000</value> -->
<!-- 		</constructor-arg> -->
<!-- 	</bean> -->

<!-- 	<bean name="serverC" class="java.net.InetSocketAddress"> -->
<!-- 		<constructor-arg> -->
<!-- 			<value>10.0.1.77</value> -->
<!-- 		</constructor-arg> -->
<!-- 		<constructor-arg> -->
<!-- 			<value>12000</value> -->
<!-- 		</constructor-arg> -->
<!-- 	</bean> -->
</beans>